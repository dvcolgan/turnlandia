// Generated by CoffeeScript 1.6.3
var Action, ActionManager;

Action = (function() {
  function Action(json) {
    _.extend(this, json);
  }

  return Action;

})();

ActionManager = (function() {
  function ActionManager() {
    $(document).on('unitPlaced', this.handleInitialPlacement);
    this.actions = [];
  }

  ActionManager.prototype.handleAction = function(type, col, row) {
    var actionData;
    switch (type) {
      case 'initial':
        actionData = {
          type: 'initial',
          srcCol: col,
          srcRow: row,
          destCol: col,
          destRow: row
        };
    }
    this.actions.push(new Action(actionData));
    return $.ajax({
      url: '/api/action/',
      method: 'POST',
      dataType: 'json',
      data: actionData,
      success: function(response) {},
      error: function(response) {
        return alert("Error saving move.  Please check your internet connection and try again: " + (JSON.stringify(response)));
      }
    });
  };

  ActionManager.prototype.draw = function() {
    var action, amount, col, i, initialPlacements, row, rowData, screenX, screenY, textX, textY, unitRadius, unitX, unitY, _i, _len, _ref, _ref1, _results;
    TB.ctx.textAlign = 'right';
    TB.fillOutlinedText("This Turn's Actions", TB.camera.width - 16, 24);
    initialPlacements = new util.Hash2D();
    _ref = this.actions;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      action = _ref[i];
      TB.fillOutlinedText(action.type, TB.camera.width - 16, 24 + i * 24 + 24);
      if (action.type === 'initial') {
        initialPlacements.increment(action.srcCol, action.srcRow);
      }
    }
    _ref1 = initialPlacements.getRaw();
    _results = [];
    for (col in _ref1) {
      rowData = _ref1[col];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (row in rowData) {
          amount = rowData[row];
          screenX = (action.srcCol * TB.camera.zoomedGridSize) - TB.camera.x;
          screenY = (action.srcRow * TB.camera.zoomedGridSize) - TB.camera.y;
          unitX = screenX + TB.camera.zoomedGridSize / 2;
          unitY = screenY + TB.camera.zoomedGridSize / 2;
          unitRadius = TB.camera.zoomedUnitSize / 2;
          textX = 300;
          textY = 300 + 5;
          amount = 10;
          TB.ctx.save();
          TB.ctx.fillStyle = 'white';
          TB.ctx.beginPath();
          TB.ctx.arc(unitX, unitY, TB.camera.zoomedUnitSize / 2, 0, 2 * Math.PI);
          TB.ctx.fill();
          TB.ctx.stroke();
          TB.ctx.fillStyle = 'black';
          TB.ctx.textAlign = 'center';
          TB.ctx.fillText(amount, textX + 1, textY + 1);
          TB.ctx.fillText(amount, textX + 1, textY - 1);
          TB.ctx.fillText(amount, textX - 1, textY + 1);
          TB.ctx.fillText(amount, textX - 1, textY - 1);
          TB.ctx.fillStyle = 'white';
          TB.ctx.fillText(amount, textX, textY);
          _results1.push(TB.ctx.restore());
        }
        return _results1;
      })());
    }
    return _results;
  };

  return ActionManager;

})();

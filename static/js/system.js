// Generated by CoffeeScript 1.6.3
var requestAnimationFrame;

requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

window.requestAnimationFrame = requestAnimationFrame;

window.TB = {
  players: {},
  currentAction: 'move',
  dragging: false,
  lastMouse: {
    x: 0,
    y: 0
  },
  lastScroll: {
    x: 0,
    y: 0
  },
  activeSquare: {
    col: 0,
    row: 0
  },
  unitSize: 32,
  gridSize: 48,
  sectorSize: 10,
  myAccount: null,
  isInitialPlacement: false,
  images: {
    othertilesImage: $('#othertiles-image').get(0),
    gridImage: $('#grid-image').get(0),
    forestTiles: $('#forest-tiles').get(0),
    mountainsTiles: $('#mountains-tiles').get(0),
    waterTiles: $('#water-tiles').get(0),
    roadTiles: $('#road-tiles').get(0),
    cityTiles: $('#city-tiles').get(0)
  },
  init: function() {
    TB.ctx = $('.board').get(0).getContext('2d');
    TB.camera = new Camera();
    TB.board = new Board();
    TB.cursor = new Cursor();
    TB.actions = new ActionManager();
    TB.fetcher = new DataFetcher();
    return TB.fetcher.loadInitialData(function(data) {
      TB.registerEventHandlers();
      TB.isInitialPlacement = data.isInitialPlacement;
      if (TB.isInitialPlacement) {
        $('.game-toolbar').find('.btn-action').not('.btn-initial').not('.btn-undo').hide();
        $('.btn-initial').trigger('click');
      } else {
        $('.game-toolbar').find('.btn-initial').hide();
        $('.btn-move').trigger('click');
      }
      TB.fpsCounter = util.makeFPSCounter(20);
      TB.myAccount = data.account;
      $('#total-unit-display').text(data.totalUnits);
      TB.actions.loadFromJSON(data.actions);
      requestAnimationFrame(TB.mainLoop);
      TB.camera.moveTo(data.centerCol * TB.camera.zoomedGridSize, data.centerRow * TB.camera.zoomedGridSize);
      TB.camera.moveBy(-TB.camera.width / 2, -TB.camera.height / 2);
      return TB.fetcher.loadSectorsOnScreen();
    });
  },
  registerEventHandlers: function() {
    var _this = this;
    $('.btn-action').click(function(event) {
      var kind;
      kind = $(this).data('action');
      if (kind === 'undo') {
        TB.actions.undo();
        requestAnimationFrame(TB.mainLoop);
      } else if (kind === 'move' && $(this).hasClass('yellow')) {
        TB.actions.cancelMove();
      } else {
        TB.currentAction = kind;
        $('.btn-action').removeClass('active');
        $(this).addClass('active');
      }
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board').mousedown(function(event) {
      event.preventDefault();
      TB.lastMouse = {
        x: event.offsetX,
        y: event.offsetY
      };
      TB.lastScroll.x = TB.camera.x;
      TB.lastScroll.y = TB.camera.y;
      TB.dragging = true;
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board').mousemove((function() {
      var lastX, lastY,
        _this = this;
      lastX = null;
      lastY = null;
      return function(event) {
        if (event.clientX === lastX && event.clientY === lastY) {
          return;
        }
        lastX = event.clientX;
        lastY = event.clientY;
        TB.cursor.move(event.offsetX + TB.camera.x, event.offsetY + TB.camera.y);
        TB.activeSquare.col = TB.camera.mouseXToCol(event.offsetX);
        TB.activeSquare.row = TB.camera.mouseYToRow(event.offsetY);
        if (TB.dragging) {
          event.preventDefault();
          TB.camera.moveTo(TB.lastScroll.x - (event.offsetX - TB.lastMouse.x), TB.lastScroll.y - (event.offsetY - TB.lastMouse.y));
          TB.fetcher.loadSectorsOnScreen();
        }
        return requestAnimationFrame(TB.mainLoop);
      };
    })());
    $('.board').mouseup(function(event) {
      TB.dragging = false;
      if (Math.abs(TB.camera.x - TB.lastScroll.x) < 5 && Math.abs(TB.camera.y - TB.lastScroll.y) < 5) {
        TB.actions.handleAction(TB.currentAction, TB.camera.mouseXToCol(event.offsetX), TB.camera.mouseYToRow(event.offsetY));
      }
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board').mouseleave(function(event) {
      TB.dragging = false;
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board').mousewheel(function(event, delta, deltaX, deltaY) {
      TB.camera.zoom(event.offsetX, event.offsetY, delta);
      return requestAnimationFrame(TB.mainLoop);
    });
    $(window).resize(function() {
      TB.camera.resize();
      $('.board').attr('width', TB.camera.width).attr('height', TB.camera.height);
      $('.stats-bar').css('width', TB.camera.width);
      TB.ctx = $('.board').get(0).getContext('2d');
      return requestAnimationFrame(TB.mainLoop);
    });
    $(window).trigger('resize');
    $(window).on('squaresLoaded', function(event) {
      var squareData, _i, _len, _ref;
      _ref = event.squareData;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        squareData = _ref[_i];
        TB.board.addSquare(squareData);
      }
      return requestAnimationFrame(TB.mainLoop);
    });
    return $(window).on('objectsLoaded', function(event) {
      var treeData, unitData, _i, _j, _len, _len1, _ref, _ref1;
      _ref = event.sectorData.units;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        unitData = _ref[_i];
        TB.board.addUnit(unitData);
      }
      _ref1 = event.sectorData.trees;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        treeData = _ref1[_j];
        TB.board.addTree(treeData);
      }
      return requestAnimationFrame(TB.mainLoop);
    });
  },
  mainLoop: function(timestamp) {
    TB.board.draw();
    TB.actions.draw();
    return TB.cursor.draw();
  },
  fillOutlinedText: function(text, screenX, screenY) {
    TB.ctx.save();
    TB.ctx.font = 'bold 16px Arial';
    TB.ctx.fillStyle = 'black';
    TB.ctx.fillText(text, screenX + 1, screenY + 1);
    TB.ctx.fillText(text, screenX + 1, screenY - 1);
    TB.ctx.fillText(text, screenX - 1, screenY + 1);
    TB.ctx.fillText(text, screenX - 1, screenY - 1);
    TB.ctx.fillStyle = 'white';
    TB.ctx.fillText(text, screenX, screenY);
    return TB.ctx.restore();
  }
};

// Generated by CoffeeScript 1.6.3
var Account, requestAnimationFrame;

requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

window.requestAnimationFrame = requestAnimationFrame;

Account = (function() {
  function Account(id, username, color) {
    this.id = id;
    this.username = username;
    this.color = color;
  }

  return Account;

})();

window.TB = {
  players: {},
  currentAction: null,
  currentUnit: null,
  dragging: false,
  lastMouse: {
    x: 0,
    y: 0
  },
  lastScroll: {
    x: 0,
    y: 0
  },
  activeSquare: {
    col: 0,
    row: 0
  },
  unitSize: 38,
  gridSize: 48,
  sectorSize: 50,
  myAccount: null,
  accounts: {},
  isInitialPlacement: false,
  images: {
    othertilesImage: $('#othertiles-image').get(0),
    gridImage: $('#grid-image').get(0),
    forestTiles: $('#forest-tiles').get(0),
    mountainsTiles: $('#mountains-tiles').get(0),
    waterTiles: $('#water-tiles').get(0),
    roadTiles: $('#road-tiles').get(0),
    cityTiles: $('#city-tiles').get(0)
  },
  initialize: function() {
    TB.ctx = $('.board-canvas').get(0).getContext('2d');
    TB.camera = new Camera();
    TB.board = new Board();
    TB.actions = new ActionManager();
    $('.action-ring').hide();
    TB.fetcher = new DataFetcher();
    return TB.fetcher.loadInitialData(function(data) {
      TB.registerEventHandlers();
      TB.isInitialPlacement = data.isInitialPlacement;
      TB.myAccount = data.account;
      $('.total-unit-display span').text(data.totalUnits);
      $('.wood-display span').text(data.account.wood);
      $('.food-display span').text(data.account.food);
      $('.ore-display span').text(data.account.ore);
      $('.money-display span').text(data.account.money);
      TB.actions.loadFromJSON(data.actions);
      requestAnimationFrame(TB.mainLoop);
      TB.camera.moveTo(data.centerCol * TB.camera.zoomedGridSize, data.centerRow * TB.camera.zoomedGridSize);
      TB.camera.moveBy(-TB.camera.width / 2, -TB.camera.height / 2);
      return TB.fetcher.loadSectorsOnScreen();
    });
  },
  registerEventHandlers: function() {
    var _this = this;
    $('.board-canvas').mousedown(function(event) {
      var offsetX, offsetY, _ref;
      $('.action-ring').hide();
      event.preventDefault();
      _ref = util.getMouseOffset(event), offsetX = _ref[0], offsetY = _ref[1];
      TB.lastMouse = {
        x: offsetX,
        y: offsetY
      };
      TB.lastScroll.x = TB.camera.x;
      TB.lastScroll.y = TB.camera.y;
      TB.dragging = true;
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board-canvas').mousemove((function() {
      var lastX, lastY,
        _this = this;
      lastX = null;
      lastY = null;
      return function(event) {
        var offsetX, offsetY, _ref;
        _ref = util.getMouseOffset(event), offsetX = _ref[0], offsetY = _ref[1];
        if (offsetX === lastX && offsetY === lastY) {
          return;
        }
        lastX = offsetX;
        lastY = offsetY;
        TB.activeSquare.col = TB.camera.mouseXToCol(offsetX);
        TB.activeSquare.row = TB.camera.mouseYToRow(offsetY);
        if (TB.dragging) {
          event.preventDefault();
          TB.camera.moveTo(TB.lastScroll.x - (offsetX - TB.lastMouse.x), TB.lastScroll.y - (offsetY - TB.lastMouse.y));
          TB.fetcher.loadSectorsOnScreen();
        }
        return requestAnimationFrame(TB.mainLoop);
      };
    })());
    $('.board-canvas').mouseup(function(event) {
      var col, offsetX, offsetY, row, unit, valid, _ref;
      _ref = util.getMouseOffset(event), offsetX = _ref[0], offsetY = _ref[1];
      TB.dragging = false;
      if (Math.abs(TB.camera.x - TB.lastScroll.x) < 5 && Math.abs(TB.camera.y - TB.lastScroll.y) < 5) {
        col = TB.camera.mouseXToCol(offsetX);
        row = TB.camera.mouseYToRow(offsetY);
        if (TB.isInitialPlacement) {
          TB.currentAction = 'initial';
        }
        if (TB.currentAction === null) {
          unit = TB.board.units.get(col, row);
          if (unit !== null && unit.ownerID === TB.myAccount.id) {
            TB.currentUnit = unit;
            $('.action-ring').show();
            $('.action-ring').css('left', TB.camera.worldColToScreenPosX(col) + TB.camera.zoomedGridSize / 2).css('top', TB.camera.worldRowToScreenPosY(row) + TB.camera.zoomedGridSize / 2);
          }
        } else {
          console.log('doing action');
          if (TB.currentAction === 'initial') {
            TB.actions.handleAction(TB.currentAction, col, row, col, row);
          } else {
            valid = TB.actions.handleAction(TB.currentAction, col, row, TB.currentUnit.col, TB.currentUnit.row);
            if (!valid) {
              TB.currentUnit = null;
              TB.currentAction = null;
            }
          }
        }
      }
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.btn-undo').click(function(event) {
      TB.actions.undo();
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.btn-action').not('.btn-undo').click(function(event) {
      var kind;
      kind = $(this).data('action');
      $('.action-ring').hide();
      if (TB.currentUnit.actionsLeft > 0) {
        TB.currentAction = kind;
        TB.actions.createOverlay(TB.currentUnit, kind);
        if (kind === 'move') {
          TB.actions.beginMove(TB.currentUnit.col, TB.currentUnit.row);
        }
      } else {
        TB.currentUnit = null;
        TB.currentAction = null;
      }
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board-canvas').mouseleave(function(event) {
      TB.dragging = false;
      return requestAnimationFrame(TB.mainLoop);
    });
    $('.board-canvas').mousewheel(function(event, delta, deltaX, deltaY) {
      var offsetX, offsetY, _ref;
      _ref = util.getMouseOffset(event), offsetX = _ref[0], offsetY = _ref[1];
      TB.camera.zoom(offsetX, offsetY, delta);
      return requestAnimationFrame(TB.mainLoop);
    });
    $(window).resize(function() {
      TB.camera.resize();
      $('.board').css('width', TB.camera.width).css('height', TB.camera.height);
      $('.board-canvas').attr('width', TB.camera.width).attr('height', TB.camera.height);
      $('.stats-bar').css('width', TB.camera.width);
      TB.ctx = $('.board-canvas').get(0).getContext('2d');
      return requestAnimationFrame(TB.mainLoop);
    });
    $(window).trigger('resize');
    return $(window).on('sectorLoaded', function(event) {
      var accountData, accountID, amount, col, color, ownerID, row, rowData, squareData, startCol, startRow, terrainType, thisAccountData, thisUnitData, unitData, username, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
      if (event.sectorData) {
        _ref = event.sectorData.split('|'), squareData = _ref[0], unitData = _ref[1], accountData = _ref[2];
        if (squareData) {
          startCol = event.sectorX * TB.sectorSize;
          startRow = event.sectorY * TB.sectorSize;
          _ref1 = squareData.split('\n');
          for (row = _i = 0, _len = _ref1.length; _i < _len; row = ++_i) {
            rowData = _ref1[row];
            _ref2 = rowData.split(',');
            for (col = _j = 0, _len1 = _ref2.length; _j < _len1; col = ++_j) {
              terrainType = _ref2[col];
              TB.board.addSquare(startCol + col, startRow + row, parseInt(terrainType));
            }
          }
        }
        if (accountData) {
          _ref3 = accountData.split('\n');
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            thisAccountData = _ref3[_k];
            _ref4 = thisAccountData.split(','), accountID = _ref4[0], username = _ref4[1], color = _ref4[2];
            TB.accounts[accountID] = new Account(parseInt(accountID), username, color);
          }
        }
        if (unitData) {
          _ref5 = unitData.split('\n');
          for (_l = 0, _len3 = _ref5.length; _l < _len3; _l++) {
            thisUnitData = _ref5[_l];
            _ref6 = thisUnitData.split(','), col = _ref6[0], row = _ref6[1], ownerID = _ref6[2], amount = _ref6[3];
            TB.board.addUnit(parseInt(col), parseInt(row), parseInt(ownerID), parseInt(amount));
          }
        }
        return requestAnimationFrame(TB.mainLoop);
      }
    });
  },
  mainLoop: function(timestamp) {
    TB.board.drawFirst();
    TB.actions.draw();
    TB.board.drawSecond();
    return TB.drawCursor();
  },
  drawCursor: function() {
    var cursorSize, screenX, screenY, textX, textY;
    cursorSize = TB.camera.zoomedGridSize;
    screenX = TB.camera.worldColToScreenPosX(TB.activeSquare.col);
    screenY = TB.camera.worldRowToScreenPosY(TB.activeSquare.row);
    TB.ctx.save();
    TB.ctx.strokeStyle = 'black';
    TB.ctx.fillStyle = 'black';
    TB.ctx.strokeRect(screenX, screenY, cursorSize, cursorSize);
    TB.ctx.restore();
    textX = screenX - 8;
    textY = screenY - 4;
    return TB.fillOutlinedText(TB.activeSquare.col + ',' + TB.activeSquare.row, textX, textY);
  },
  fillOutlinedText: function(text, screenX, screenY) {
    TB.ctx.save();
    TB.ctx.font = 'bold 16px Arial';
    TB.ctx.fillStyle = 'black';
    TB.ctx.fillText(text, screenX + 1, screenY + 1);
    TB.ctx.fillText(text, screenX + 1, screenY - 1);
    TB.ctx.fillText(text, screenX - 1, screenY + 1);
    TB.ctx.fillText(text, screenX - 1, screenY - 1);
    TB.ctx.fillStyle = 'white';
    TB.ctx.fillText(text, screenX, screenY);
    return TB.ctx.restore();
  }
};

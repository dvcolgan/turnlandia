// Generated by CoffeeScript 1.6.3
var Camera;

Camera = (function() {
  function Camera() {
    this.x = 0;
    this.y = 0;
    this.lastX = 0;
    this.lastY = 0;
    this.width = 800;
    this.height = 600;
    this.zoomFactor = 1;
    this.zoomLevel = 1;
    this.maxZoomLevel = 3;
    this.zoomedGridSize = TB.gridSize;
    this.zoomedUnitSize = TB.unitSize;
    this.zoomedSubGridSize = TB.gridSize / 2;
  }

  Camera.prototype.moveBy = function(x, y) {
    this.x += parseInt(x);
    return this.y += parseInt(y);
  };

  Camera.prototype.moveTo = function(x, y) {
    this.x = parseInt(x);
    return this.y = parseInt(y);
  };

  Camera.prototype.worldColToScreenPosX = function(worldX) {
    return worldX * TB.gridSize * this.zoomFactor - this.x;
  };

  Camera.prototype.worldRowToScreenPosY = function(worldY) {
    return worldY * TB.gridSize * this.zoomFactor - this.y;
  };

  Camera.prototype.worldToScreenPosX = function(worldX) {
    return worldX * this.zoomFactor - this.x;
  };

  Camera.prototype.worldToScreenPosY = function(worldY) {
    return worldY * this.zoomFactor - this.y;
  };

  Camera.prototype.screenToWorldPosX = function(screenX) {
    return screenX + this.x;
  };

  Camera.prototype.screenToWorldPosY = function(screenY) {
    return screenY + this.y;
  };

  Camera.prototype.pixelToSquareCoord = function(coord) {
    return Math.floor(coord / this.zoomedGridSize);
  };

  Camera.prototype.mouseXToCol = function(mouseX) {
    return this.pixelToSquareCoord(mouseX + this.x);
  };

  Camera.prototype.mouseYToRow = function(mouseY) {
    return this.pixelToSquareCoord(mouseY + this.y);
  };

  Camera.prototype.centerOnCoords = function(col, row) {
    this.x = parseInt((col * this.zoomedGridSize + (this.zoomedUnitSize / 2)) - this.width / 2);
    return this.y = parseInt((row * this.zoomedGridSize + (this.zoomedUnitSize / 2)) - this.height / 2);
  };

  Camera.prototype.resize = function() {
    this.width = $(window).width();
    return this.height = $(window).height() - 69;
  };

  Camera.prototype.zoom = function(x, y, delta) {
    this.zoomLevel -= delta;
    if (this.zoomLevel < 1) {
      this.zoomLevel = 1;
    }
    if (this.zoomLevel > this.maxZoomLevel) {
      this.zoomLevel = this.maxZoomLevel;
    }
    if (this.zoomLevel === 1) {
      this.zoomFactor = 1;
    }
    if (this.zoomLevel === 2) {
      this.zoomFactor = 36 / 48;
    }
    if (this.zoomLevel === 3) {
      this.zoomFactor = 24 / 48;
    }
    if (this.zoomLevel === 4) {
      this.zoomFactor = 12 / 48;
    }
    if (this.zoomLevel === 5) {
      this.zoomFactor = 6 / 48;
    }
    this.zoomedGridSize = TB.gridSize * this.zoomFactor;
    this.zoomedUnitSize = TB.unitSize * this.zoomFactor;
    return this.zoomedSubGridSize = this.zoomedGridSize / 2;
  };

  return Camera;

})();

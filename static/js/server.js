// Generated by CoffeeScript 1.6.3
var app, async, base64, express, getDjangoUserID, jpickle, request, sqlite3, square;

sqlite3 = require('sqlite3').verbose();

express = require('express');

request = require('request');

async = require('async');

base64 = require('base64');

jpickle = require('jpickle');

square = require('./square');

app = express();

app.use(express.cookieParser());

app.use(express.bodyParser());

getDjangoUserID = function(req, callback) {
  var db;
  db = new sqlite3.Database('../../turnbased.sqlite');
  return db.get('SELECT * FROM django_session WHERE session_key = (?);', [req.cookies.sessionid], function(err, row) {
    var id, sessionData;
    console.log(row);
    sessionData = jpickle.loads(base64.decode(row.session_data).split(':')[1]);
    id = sessionData._auth_user_id;
    return callback(id);
  });
};

app.get('/api/squares/:startCol/:startRow/:width/:height/', function(req, res) {
  var height, startCol, startRow, width;
  startCol = parseInt(req.params.startCol);
  startRow = parseInt(req.params.startRow);
  width = parseInt(req.params.width);
  height = parseInt(req.params.height);
  return square.getRegion(startCol, startRow, width, height, function(data) {
    return res.send(data.getRaw());
  });
});

app.get('/api/actions/', function(req, res) {
  return getDjangoUserID(req, function(userID) {
    return square.getActions(userID, function(actions) {
      return res.send(actions);
    });
  });
});

app.post('/api/actions/', function(req, res) {
  var action;
  action = req.body;
  return getDjangoUserID(req, function(userID) {
    return square.saveAction(userID, action, function() {
      return res.send({});
    });
  });
});

app.listen(3000);

console.log('Listening on port 3000...');

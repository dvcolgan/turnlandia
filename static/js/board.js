// Generated by CoffeeScript 1.6.3
var Board, DataFetcher;

DataFetcher = (function() {
  function DataFetcher() {
    this.loadingStates = new util.Hash2D();
  }

  DataFetcher.prototype.loadInitialData = function(callback) {
    var _this = this;
    return $.ajax({
      url: '/api/actions/',
      method: 'GET',
      dataType: 'json',
      success: function(data) {
        return callback(data);
      }
    });
  };

  DataFetcher.prototype.loadSectors = function(startSectorX, startSectorY, endSectorX, endSectorY, callback) {
    var sectorX, sectorY, _i, _results;
    _results = [];
    for (sectorX = _i = startSectorX; startSectorX <= endSectorX ? _i <= endSectorX : _i >= endSectorX; sectorX = startSectorX <= endSectorX ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (sectorY = _j = startSectorY; startSectorY <= endSectorY ? _j <= endSectorY : _j >= endSectorY; sectorY = startSectorY <= endSectorY ? ++_j : --_j) {
          if (this.loadingStates.get(sectorX, sectorY) === null) {
            this.loadingStates.set(sectorX, sectorY, false);
            _results1.push(this.loadSector(sectorX, sectorY, callback));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DataFetcher.prototype.loadSector = function(sectorX, sectorY, callback) {
    var _this = this;
    return $.ajax({
      url: '/api/squares/' + (sectorX * TB.sectorSize) + '/' + (sectorY * TB.sectorSize) + '/' + TB.sectorSize + '/' + TB.sectorSize + '/',
      method: 'GET',
      dataType: 'json',
      success: function(data) {
        _this.loadingStates.set(sectorX, sectorY, true);
        return callback(data);
      }
    });
  };

  return DataFetcher;

})();

Board = (function() {
  function Board() {}

  Board.prototype.placeUnit = function(col, row, owner) {
    var square;
    square = TB.squareData.get(col, row);
    if (!square.units) {
      square.units = {};
      square.units[owner] = {
        color: 'blue',
        amount: 1
      };
    } else {
      square.units[owner].amount++;
    }
    return $(document).trigger({
      type: 'unitPlaced',
      col: col,
      row: row
    });
  };

  Board.prototype.draw = function() {
    var col, endCol, endRow, owner, row, screenX, screenY, startCol, startRow, subGridSize, textX, textY, thisSquare, unit, unitRadius, unitX, unitY, zoomedGridSize, _i, _results;
    TB.ctx.textAlign = 'center';
    TB.ctx.fillStyle = '#148753';
    TB.ctx.fillRect(0, 0, TB.boardWidth, TB.boardHeight);
    TB.ctx.lineWidth = 1;
    zoomedGridSize = TB.gridSize * TB.zoomFactor;
    subGridSize = zoomedGridSize / 2;
    startCol = Math.floor(TB.scroll.x / zoomedGridSize);
    startRow = Math.floor(TB.scroll.y / zoomedGridSize);
    endCol = startCol + Math.ceil(TB.boardWidth / zoomedGridSize);
    endRow = startRow + Math.ceil(TB.boardHeight / zoomedGridSize);
    _results = [];
    for (row = _i = startRow; startRow <= endRow ? _i <= endRow : _i >= endRow; row = startRow <= endRow ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = startCol; startCol <= endCol ? _j <= endCol : _j >= endCol; col = startCol <= endCol ? ++_j : --_j) {
          thisSquare = TB.squareData.get(col, row);
          screenX = (col * zoomedGridSize) - TB.scroll.x;
          screenY = (row * zoomedGridSize) - TB.scroll.y;
          if (thisSquare) {
            if (thisSquare.terrainType === 'water' || thisSquare.terrainType === 'mountains' || thisSquare.terrainType === 'forest') {
              this.drawSubTile(TB.images[thisSquare.terrainType + 'Tiles'], thisSquare.northWestTile24, screenX, screenY, subGridSize, 0, 0);
              this.drawSubTile(TB.images[thisSquare.terrainType + 'Tiles'], thisSquare.northEastTile24, screenX, screenY, subGridSize, subGridSize, 0);
              this.drawSubTile(TB.images[thisSquare.terrainType + 'Tiles'], thisSquare.southWestTile24, screenX, screenY, subGridSize, 0, subGridSize);
              this.drawSubTile(TB.images[thisSquare.terrainType + 'Tiles'], thisSquare.southEastTile24, screenX, screenY, subGridSize, subGridSize, subGridSize);
            }
            unitX = screenX + zoomedGridSize / 2;
            unitY = screenY + zoomedGridSize / 2;
            unitRadius = (TB.unitSize * TB.zoomFactor) / 2;
            textX = unitX;
            textY = unitY + (6 * TB.zoomFactor);
            if (thisSquare.units) {
              _results1.push((function() {
                var _ref, _results2;
                _ref = thisSquare.units;
                _results2 = [];
                for (owner in _ref) {
                  unit = _ref[owner];
                  TB.ctx.fillStyle = 'blue';
                  TB.ctx.beginPath();
                  TB.ctx.arc(unitX, unitY, unitRadius, 0, 2 * Math.PI);
                  TB.ctx.fill();
                  TB.ctx.stroke();
                  TB.ctx.fillStyle = 'black';
                  TB.ctx.fillText(unit.amount, textX + 1, textY + 1);
                  TB.ctx.fillText(unit.amount, textX + 1, textY - 1);
                  TB.ctx.fillText(unit.amount, textX - 1, textY + 1);
                  TB.ctx.fillText(unit.amount, textX - 1, textY - 1);
                  TB.ctx.fillStyle = 'white';
                  _results2.push(TB.ctx.fillText(unit.amount, textX, textY));
                }
                return _results2;
              })());
            } else {
              _results1.push(void 0);
            }
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.drawSubTile = function(image, subTile, screenX, screenY, subGridSize, subTileOffsetX, subTileOffsetY) {
    return TB.ctx.drawImage(image, this.getTile24XOffset(subTile), this.getTile24YOffset(subTile), TB.gridSize / 2, TB.gridSize / 2, screenX + subTileOffsetX, screenY + subTileOffsetY, subGridSize, subGridSize);
  };

  Board.prototype.getTile24XOffset = function(tile) {
    return 24 * tile % 144;
  };

  Board.prototype.getTile24YOffset = function(tile) {
    return parseInt(24 * tile / 144) * 24;
  };

  return Board;

})();

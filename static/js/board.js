// Generated by CoffeeScript 1.6.3
var Board, Sector, Square, Unit;

Unit = (function() {
  function Unit(square, $dom_node, data) {
    this.square = square;
    this.$dom_node = $dom_node;
    _.extend(this, data);
    this.$dom_node.css('background-color', this.owner_color).css('border-bottom-width', (this.amount + 3) / 2).css('margin-top', (-(this.amount + 3) / 2) + 'px').css('height', (22 + this.amount / 2) + 'px');
    this.$dom_node.text(this.amount);
  }

  return Unit;

})();

Square = (function() {
  function Square(sector, $dom_node, data) {
    var $unit_dom_node, i, _i, _ref;
    this.sector = sector;
    this.$dom_node = $dom_node;
    _.extend(this, data);
    this.$dom_node.css({
      'background-color': this.owner_color
    });
    this.$dom_node.data('col', this.col).data('row', this.row);
    for (i = _i = 0, _ref = this.units.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      $unit_dom_node = $('<div class="unit"></div>');
      if (i === 0) {
        $unit_dom_node.addClass('first');
      }
      if (i === 1) {
        $unit_dom_node.addClass('second');
      }
      if (i === 2) {
        $unit_dom_node.addClass('third');
      }
      if (i === 3) {
        $unit_dom_node.addClass('fourth');
      }
      if (this.units.length === 1) {
        $unit_dom_node.addClass('one');
      }
      if (this.units.length === 2) {
        $unit_dom_node.addClass('two');
      }
      if (this.units.length === 3) {
        $unit_dom_node.addClass('three');
      }
      if (this.units.length === 4) {
        $unit_dom_node.addClass('four');
      }
      this.$dom_node.append($unit_dom_node);
      this.units[i] = new Unit(this, $unit_dom_node, this.units[i]);
    }
  }

  return Square;

})();

Sector = (function() {
  function Sector(board, $dom_node, x, y) {
    var first_square_x, first_square_y,
      _this = this;
    this.board = board;
    this.$dom_node = $dom_node;
    this.x = x;
    this.y = y;
    this.squares = {};
    this.$dom_node.css('left', (this.x * TB.sector_size * TB.grid_size - this.board.scroll.x) + 'px').css('top', (this.y * TB.sector_size * TB.grid_size - this.board.scroll.y) + 'px');
    first_square_x = this.x * TB.sector_size;
    first_square_y = this.y * TB.sector_size;
    $.getJSON('/api/sector/' + first_square_x + '/' + first_square_y + '/' + TB.sector_size + '/' + TB.sector_size + '/', function(data, status) {
      var $square_dom_node, i, square_data, _i, _len, _results;
      if (status === 'success') {
        _results = [];
        for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
          square_data = data[i];
          $square_dom_node = $('<div class="grid-square"></div>');
          $square_dom_node.css('left', parseInt((i % TB.sector_size) * TB.grid_size) + 'px').css('top', parseInt(Math.floor(i / TB.sector_size) * TB.grid_size) + 'px');
          _this.$dom_node.append($square_dom_node);
          if (!(square_data.col in _this.squares)) {
            _this.squares[square_data.col] = {};
          }
          _results.push(_this.squares[square_data.col][square_data.row] = new Square(_this, $square_dom_node, square_data));
        }
        return _results;
      } else {
        return alert(JSON.stringify(data));
      }
    });
  }

  Sector.prototype.show = function() {};

  Sector.prototype.hide = function() {};

  return Sector;

})();

Board = (function() {
  function Board($dom_node, board_consts) {
    var resizeBoard,
      _this = this;
    this.$dom_node = $dom_node;
    _.extend(this, board_consts);
    this.scroll = {
      x: 0,
      y: 0
    };
    this.scroll.x = -this.get_view_width() / 2;
    this.scroll.y = -this.get_view_height() / 2;
    this.sectors = {};
    this.squares = {};
    this.last_mouse = {
      x: 0,
      y: 0
    };
    this.last_scroll = {
      x: 0,
      y: 0
    };
    this.dragging = false;
    resizeBoard = function() {
      _this.$dom_node.width(_this.get_view_width()).height(_this.get_view_height());
      return _this.load_sectors_on_screen();
    };
    $(window).resize(resizeBoard);
    resizeBoard();
    this.$dom_node.mousedown(function(event) {
      event.preventDefault();
      _this.last_mouse = {
        x: event.clientX,
        y: event.clientY
      };
      _this.last_scroll.x = _this.scroll.x;
      _this.last_scroll.y = _this.scroll.y;
      return _this.dragging = true;
    });
    this.$dom_node.mousemove(function(event) {
      if (_this.dragging) {
        event.preventDefault();
        _this.scroll.x = _this.last_scroll.x - (event.clientX - _this.last_mouse.x);
        _this.scroll.y = _this.last_scroll.y - (event.clientY - _this.last_mouse.y);
        _this.scroll_sectors();
        return _this.load_sectors_on_screen();
      }
    });
    $(document).mouseup(function(event) {
      return _this.dragging = false;
    });
    this.active_square = null;
    this.is_moving = null;
    this.move_start_square = null;
    this.$dom_node.on('click', '.grid-square', function(event) {
      if (!(Math.abs(_this.last_scroll.x - _this.scroll.x) < 5 && Math.abs(_this.last_scroll.y - _this.scroll.y) < 5)) {
        debugger;
        console.log('ignoring click');
        return;
      }
      console.log(TB.current_action);
      if (TB.current_action === 'move') {
        if (!_this.is_moving) {
          _this.move_start_square = _this.active_square;
          _this.is_moving = true;
          console.log('setting ismoving to true');
        }
      }
    });
    $(document).keydown(function(event) {
      _this.is_moving = false;
      return true;
    });
    this.$dom_node.on('mouseenter', '.grid-square', function(event) {
      var $square_dom_node, connecting_square, dir, dist, dists, previous_active_square, shortest, shortestDist, _results;
      previous_active_square = _this.active_square;
      $square_dom_node = $(event.target);
      _this.active_square = _this.get_square($square_dom_node.data('col'), $square_dom_node.data('row'));
      if (_this.is_moving && previous_active_square !== _this.active_square) {
        console.log('handling square hover during move');
        $('.grid-square.moving-through').removeClass('moving-through');
        connecting_square = _this.move_start_square;
        connecting_square.$dom_node.addClass('moving-through');
        _results = [];
        while (true) {
          dists = {
            left: Util.calculate_distance(connecting_square.col - 1, connecting_square.row, _this.active_square.col, _this.active_square.row),
            right: Util.calculate_distance(connecting_square.col + 1, connecting_square.row, _this.active_square.col, _this.active_square.row),
            up: Util.calculate_distance(connecting_square.col, connecting_square.row - 1, _this.active_square.col, _this.active_square.row),
            down: Util.calculate_distance(connecting_square.col, connecting_square.row + 1, _this.active_square.col, _this.active_square.row)
          };
          shortestDist = 0;
          shortest = null;
          for (dir in dists) {
            dist = dists[dir];
            if (shortest === null || dist < shortestDist) {
              shortestDist = dist;
              shortest = dir;
            }
          }
          console.log(shortest);
          if (shortest === 'left') {
            connecting_square = _this.get_square(connecting_square.col - 1, connecting_square.row);
          }
          if (shortest === 'right') {
            connecting_square = _this.get_square(connecting_square.col + 1, connecting_square.row);
          }
          if (shortest === 'up') {
            connecting_square = _this.get_square(connecting_square.col, connecting_square.row - 1);
          }
          if (shortest === 'down') {
            connecting_square = _this.get_square(connecting_square.col, connecting_square.row + 1);
          }
          connecting_square.$dom_node.addClass('moving-through');
          if (connecting_square === _this.active_square) {
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  }

  Board.prototype.get_square = function(col, row) {
    return this.sectors[Math.floor(col / TB.sector_size)][Math.floor(row / TB.sector_size)].squares[col][row];
  };

  Board.prototype.scroll_sectors = function() {
    var row, sector, x, y, _ref, _results;
    _ref = this.sectors;
    _results = [];
    for (x in _ref) {
      row = _ref[x];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (y in row) {
          sector = row[y];
          sector.$dom_node.css('left', ((sector.x * TB.sector_size * TB.grid_size) - this.scroll.x) + 'px');
          _results1.push(sector.$dom_node.css('top', ((sector.y * TB.sector_size * TB.grid_size) - this.scroll.y) + 'px'));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.load_sector = function(sector_x, sector_y) {
    var $sector_dom_node;
    if (sector_x > this.max_sector_x || sector_x < this.min_sector_x || sector_y > this.max_sector_y || sector_y < this.min_sector_y) {
      return;
    }
    if (!(sector_x in this.sectors)) {
      this.sectors[sector_x] = {};
    }
    if (!(sector_y in this.sectors[sector_x])) {
      $sector_dom_node = $('<div class="sector disable-select"></div>');
      this.$dom_node.append($sector_dom_node);
      return this.sectors[sector_x][sector_y] = new Sector(this, $sector_dom_node, sector_x, sector_y, TB.sector_size);
    } else {
      return this.sectors[sector_x][sector_y].show();
    }
  };

  Board.prototype.load_sectors_on_screen = function() {
    var sector_col, sector_pixel_size, sector_row, sectors_high, sectors_wide, x, y, _i, _results;
    sector_pixel_size = TB.sector_size * TB.grid_size;
    sectors_wide = Math.ceil(this.get_view_width() / TB.sector_size / TB.grid_size);
    sectors_high = Math.ceil(this.get_view_height() / TB.sector_size / TB.grid_size);
    _results = [];
    for (sector_col = _i = 0; 0 <= sectors_wide ? _i <= sectors_wide : _i >= sectors_wide; sector_col = 0 <= sectors_wide ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (sector_row = _j = 0; 0 <= sectors_high ? _j <= sectors_high : _j >= sectors_high; sector_row = 0 <= sectors_high ? ++_j : --_j) {
          x = (Math.floor(this.scroll.x / sector_pixel_size)) + sector_col;
          y = (Math.floor(this.scroll.y / sector_pixel_size)) + sector_row;
          _results1.push(this.load_sector(x, y));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.get_view_width = function() {
    return $(window).width() - (48 + 20) - 160;
  };

  Board.prototype.get_view_height = function() {
    return $(window).height() - 96;
  };

  return Board;

})();

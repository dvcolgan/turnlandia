// Generated by CoffeeScript 1.6.3
var Board;

Board = (function() {
  function Board() {
    this.squares = new util.Hash2D();
    this.units = new util.Hash2D();
    this.unfinalizedSquares = new util.Hash2D();
  }

  Board.prototype.getSubtiles = function(col, row) {
    var east, eastTerrain, north, northEast, northEastTerrain, northEastTile, northTerrain, northWest, northWestTerrain, northWestTile, otherCol, otherRow, otherUnfinalized, s, south, southEast, southEastTerrain, southEastTile, southTerrain, southWest, southWestTerrain, southWestTile, square, thisTerrain, west, westTerrain, _i, _len, _ref;
    thisTerrain = this.getTerrainType(col, row);
    northTerrain = this.getTerrainType(col, row - 1);
    southTerrain = this.getTerrainType(col, row + 1);
    eastTerrain = this.getTerrainType(col + 1, row);
    westTerrain = this.getTerrainType(col - 1, row);
    northEastTerrain = this.getTerrainType(col + 1, row - 1);
    northWestTerrain = this.getTerrainType(col - 1, row - 1);
    southEastTerrain = this.getTerrainType(col + 1, row + 1);
    southWestTerrain = this.getTerrainType(col - 1, row + 1);
    if (northTerrain === null) {
      this.unfinalizedSquares.push(col, row - 1, [col, row]);
    }
    if (southTerrain === null) {
      this.unfinalizedSquares.push(col, row + 1, [col, row]);
    }
    if (eastTerrain === null) {
      this.unfinalizedSquares.push(col + 1, row, [col, row]);
    }
    if (westTerrain === null) {
      this.unfinalizedSquares.push(col - 1, row, [col, row]);
    }
    if (northEastTerrain === null) {
      this.unfinalizedSquares.push(col + 1, row - 1, [col, row]);
    }
    if (northWestTerrain === null) {
      this.unfinalizedSquares.push(col - 1, row - 1, [col, row]);
    }
    if (southEastTerrain === null) {
      this.unfinalizedSquares.push(col + 1, row + 1, [col, row]);
    }
    if (southWestTerrain === null) {
      this.unfinalizedSquares.push(col - 1, row + 1, [col, row]);
    }
    north = northTerrain === thisTerrain;
    south = southTerrain === thisTerrain;
    east = eastTerrain === thisTerrain;
    west = westTerrain === thisTerrain;
    northEast = northEastTerrain === thisTerrain;
    northWest = northWestTerrain === thisTerrain;
    southEast = southEastTerrain === thisTerrain;
    southWest = southWestTerrain === thisTerrain;
    s = TB.gridSize / 2;
    if (west && northWest && north) {
      northWestTile = [s * 4, s * 0];
    }
    if (west && !northWest && north) {
      northWestTile = [s * 2, s * 2];
    }
    if (west && northWest && !north) {
      northWestTile = [s * 2, s * 0];
    }
    if (west && !northWest && !north) {
      northWestTile = [s * 2, s * 0];
    }
    if (!west && northWest && north) {
      northWestTile = [s * 0, s * 2];
    }
    if (!west && !northWest && north) {
      northWestTile = [s * 0, s * 2];
    }
    if (!west && northWest && !north) {
      northWestTile = [s * 0, s * 0];
    }
    if (!west && !northWest && !north) {
      northWestTile = [s * 0, s * 0];
    }
    if (east && northEast && north) {
      northEastTile = [s * 5, s * 0];
    }
    if (east && !northEast && north) {
      northEastTile = [s * 1, s * 2];
    }
    if (east && northEast && !north) {
      northEastTile = [s * 1, s * 0];
    }
    if (east && !northEast && !north) {
      northEastTile = [s * 1, s * 0];
    }
    if (!east && northEast && north) {
      northEastTile = [s * 3, s * 2];
    }
    if (!east && !northEast && north) {
      northEastTile = [s * 3, s * 2];
    }
    if (!east && northEast && !north) {
      northEastTile = [s * 3, s * 0];
    }
    if (!east && !northEast && !north) {
      northEastTile = [s * 3, s * 0];
    }
    if (west && southWest && south) {
      southWestTile = [s * 4, s * 1];
    }
    if (west && !southWest && south) {
      southWestTile = [s * 2, s * 1];
    }
    if (west && southWest && !south) {
      southWestTile = [s * 2, s * 3];
    }
    if (west && !southWest && !south) {
      southWestTile = [s * 2, s * 3];
    }
    if (!west && southWest && south) {
      southWestTile = [s * 0, s * 1];
    }
    if (!west && !southWest && south) {
      southWestTile = [s * 0, s * 1];
    }
    if (!west && southWest && !south) {
      southWestTile = [s * 0, s * 3];
    }
    if (!west && !southWest && !south) {
      southWestTile = [s * 0, s * 3];
    }
    if (east && southEast && south) {
      southEastTile = [s * 5, s * 1];
    }
    if (east && !southEast && south) {
      southEastTile = [s * 1, s * 1];
    }
    if (east && southEast && !south) {
      southEastTile = [s * 1, s * 3];
    }
    if (east && !southEast && !south) {
      southEastTile = [s * 1, s * 3];
    }
    if (!east && southEast && south) {
      southEastTile = [s * 3, s * 1];
    }
    if (!east && !southEast && south) {
      southEastTile = [s * 3, s * 1];
    }
    if (!east && southEast && !south) {
      southEastTile = [s * 3, s * 3];
    }
    if (!east && !southEast && !south) {
      southEastTile = [s * 3, s * 3];
    }
    otherUnfinalized = this.unfinalizedSquares.get(col, row);
    if (otherUnfinalized) {
      for (_i = 0, _len = otherUnfinalized.length; _i < _len; _i++) {
        _ref = otherUnfinalized[_i], otherCol = _ref[0], otherRow = _ref[1];
        square = this.squares.get(otherCol, otherRow);
        square.subTiles = this.getSubtiles(otherCol, otherRow);
      }
    }
    return [[northWestTile, northEastTile], [southWestTile, southEastTile]];
  };

  Board.prototype.addSquare = function(col, row, terrainType) {
    var newSquare;
    if (terrainType === 0) {
      terrainType = 'plains';
    }
    if (terrainType === 1) {
      terrainType = 'water';
    }
    if (terrainType === 2) {
      terrainType = 'mountains';
    }
    if (terrainType === 3) {
      terrainType = 'forest';
    }
    if (terrainType === 4) {
      terrainType = 'road';
    }
    if (terrainType === 5) {
      terrainType = 'city';
    }
    newSquare = new Square(col, row, terrainType);
    this.squares.set(col, row, newSquare);
    return newSquare.terrainType = this.getTerrainType(col, row);
  };

  Board.prototype.addUnit = function(col, row, ownerID, amount) {
    var unit;
    unit = new Unit(col, row, ownerID, amount);
    return this.units.set(col, row, unit);
  };

  Board.prototype.isPassable = function(col, row) {
    var terrainType;
    terrainType = this.getTerrainType(col, row);
    if (terrainType) {
      return terrainType !== 'water' && terrainType !== 'mountains';
    } else {
      return null;
    }
  };

  Board.prototype.getTerrainType = function(col, row) {
    var square;
    square = this.squares.get(col, row);
    if (square !== null) {
      return square.terrainType;
    } else {
      return null;
    }
  };

  Board.prototype.getUnitCount = function(col, row) {
    var unit;
    unit = this.units.get(col, row);
    if (unit !== null) {
      return unit.amount;
    } else {
      return 0;
    }
  };

  Board.prototype.traversalCost = function(col, row) {
    var terrainType;
    terrainType = this.getTerrainType(col, row);
    if (terrainType !== null) {
      if (terrainType === 'plains') {
        return 2;
      }
      if (terrainType === 'water') {
        return 0;
      }
      if (terrainType === 'mountains') {
        return 0;
      }
      if (terrainType === 'forest') {
        return 3;
      }
      if (terrainType === 'road') {
        return 1;
      }
      if (terrainType === 'city') {
        return 1;
      }
    } else {
      return 0;
    }
  };

  Board.prototype.drawFirst = function() {
    var col, endCol, endRow, row, startCol, startRow, thisSquare, _i, _j, _k, _results;
    TB.ctx.textAlign = 'center';
    TB.ctx.fillStyle = '#148743';
    TB.ctx.fillRect(0, 0, TB.camera.width, TB.camera.height);
    TB.ctx.lineWidth = 1;
    startCol = Math.floor(TB.camera.x / TB.camera.zoomedGridSize);
    startRow = Math.floor(TB.camera.y / TB.camera.zoomedGridSize);
    endCol = startCol + Math.ceil(TB.camera.width / TB.camera.zoomedGridSize);
    endRow = startRow + Math.ceil(TB.camera.height / TB.camera.zoomedGridSize);
    for (row = _i = startRow; startRow <= endRow ? _i <= endRow : _i >= endRow; row = startRow <= endRow ? ++_i : --_i) {
      for (col = _j = startCol; startCol <= endCol ? _j <= endCol : _j >= endCol; col = startCol <= endCol ? ++_j : --_j) {
        thisSquare = this.squares.get(col, row);
        if (thisSquare) {
          thisSquare.draw();
        }
      }
    }
    if (TB.actions.overlay) {
      _results = [];
      for (row = _k = startRow; startRow <= endRow ? _k <= endRow : _k >= endRow; row = startRow <= endRow ? ++_k : --_k) {
        _results.push((function() {
          var _l, _results1;
          _results1 = [];
          for (col = _l = startCol; startCol <= endCol ? _l <= endCol : _l >= endCol; col = startCol <= endCol ? ++_l : --_l) {
            _results1.push(TB.actions.overlay.draw(col, row));
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

  Board.prototype.drawSecond = function() {
    var col, endCol, endRow, row, startCol, startRow, thisUnit, _i, _results;
    startCol = Math.floor(TB.camera.x / TB.camera.zoomedGridSize);
    startRow = Math.floor(TB.camera.y / TB.camera.zoomedGridSize);
    endCol = startCol + Math.ceil(TB.camera.width / TB.camera.zoomedGridSize);
    endRow = startRow + Math.ceil(TB.camera.height / TB.camera.zoomedGridSize);
    _results = [];
    for (row = _i = startRow; startRow <= endRow ? _i <= endRow : _i >= endRow; row = startRow <= endRow ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (col = _j = startCol; startCol <= endCol ? _j <= endCol : _j >= endCol; col = startCol <= endCol ? ++_j : --_j) {
          thisUnit = this.units.get(col, row);
          if (thisUnit) {
            _results1.push(thisUnit.draw());
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  return Board;

})();

// Generated by CoffeeScript 1.6.3
var Board;

Board = (function() {
  Board.prototype.scroll = {
    x: 0,
    y: 0
  };

  Board.prototype.lastMouse = {
    x: 0,
    y: 0
  };

  Board.prototype.lastScroll = {
    x: 0,
    y: 0
  };

  Board.prototype.dragging = false;

  Board.prototype.gridSize = 48;

  Board.prototype.sectorSize = 10;

  Board.prototype.squareData = new Hash2D();

  Board.prototype.squareDomNodes = new Hash2D();

  Board.prototype.sectorData = new Hash2D();

  Board.prototype.sectorDomNodes = new Hash2D();

  function Board(selector) {
    var resizeBoard,
      _this = this;
    this.selector = selector;
    $(this.selector).mousedown(function(event) {
      event.preventDefault();
      _this.lastMouse = {
        x: event.clientX,
        y: event.clientY
      };
      _this.lastScroll.x = _this.scroll.x;
      _this.lastScroll.y = _this.scroll.y;
      return _this.dragging = true;
    });
    $(this.selector).mousemove(function(event) {
      if (_this.dragging) {
        event.preventDefault();
        _this.scroll.x = _this.lastScroll.x - (event.clientX - _this.lastMouse.x);
        _this.scroll.y = _this.lastScroll.y - (event.clientY - _this.lastMouse.y);
        return _this.loadSectorsOnScreen();
      }
    });
    $(document).mouseup(function(event) {
      return _this.dragging = false;
    });
    resizeBoard = function() {
      $(_this.selector).width(_this.getViewWidth()).height(_this.getViewHeight());
      return $(window).resize(resizeBoard);
    };
    resizeBoard();
  }

  Board.prototype.getViewWidth = function() {
    return $(window).width() - (48 + 20) - 160;
  };

  Board.prototype.getViewHeight = function() {
    return $(window).height() - 96;
  };

  Board.prototype.receiveSectorData = function(sectorX, sectorY, squares) {
    this.sectorData.set(sectorX, sectorY, squares);
    this.showSector(sectorX, sectorY);
    return this.scrollSector(sectorX, sectorY);
  };

  Board.prototype.loadSectorsOnScreen = function() {
    var $domNode, endSectorX, endSectorY, sectorPixelSize, sectorSectorX, sectorSectorY, sectorX, sectorY, sectorsHigh, sectorsWide, startSectorX, startSectorY, x, y, _i, _j, _k, _l, _len, _ref, _results;
    sectorPixelSize = this.sectorSize * this.gridSize;
    sectorsWide = Math.ceil(this.getViewWidth() / this.sectorSize / this.gridSize);
    sectorsHigh = Math.ceil(this.getViewHeight() / this.sectorSize / this.gridSize);
    startSectorX = null;
    startSectorY = null;
    endSectorX = null;
    endSectorY = null;
    for (sectorSectorX = _i = 0; 0 <= sectorsWide ? _i <= sectorsWide : _i >= sectorsWide; sectorSectorX = 0 <= sectorsWide ? ++_i : --_i) {
      for (sectorSectorY = _j = 0; 0 <= sectorsHigh ? _j <= sectorsHigh : _j >= sectorsHigh; sectorSectorY = 0 <= sectorsHigh ? ++_j : --_j) {
        x = (Math.floor(this.scroll.x / sectorPixelSize)) + sectorSectorX;
        y = (Math.floor(this.scroll.y / sectorPixelSize)) + sectorSectorY;
        if (startSectorX === null || x < startSectorX) {
          startSectorX = x;
        }
        if (startSectorY === null || y < startSectorY) {
          startSectorY = y;
        }
        if (endSectorX === null || x > endSectorX) {
          endSectorX = x;
        }
        if (endSectorY === null || y > endSectorY) {
          endSectorY = x;
        }
      }
    }
    _ref = this.sectorDomNodes.values();
    for (_k = 0, _len = _ref.length; _k < _len; _k++) {
      $domNode = _ref[_k];
      sectorX = $domNode.data('y');
      sectorY = $domNode.data('x');
      if (!((sectorX <= endSectorX && sectorX >= startSectorX) && (sectorY <= endSectorY && sectorY >= startSectorY))) {
        this.sectorDomNodes["delete"](sectorX, sectorY).remove();
      }
    }
    _results = [];
    for (sectorX = _l = startSectorX; startSectorX <= endSectorX ? _l <= endSectorX : _l >= endSectorX; sectorX = startSectorX <= endSectorX ? ++_l : --_l) {
      _results.push((function() {
        var _m, _results1;
        _results1 = [];
        for (sectorY = _m = startSectorY; startSectorY <= endSectorY ? _m <= endSectorY : _m >= endSectorY; sectorY = startSectorY <= endSectorY ? ++_m : --_m) {
          if (this.sectorDomNodes.get(sectorX, sectorY) === null) {
            if (this.sectorData.get(sectorX, sectorY) === null) {
              this.sectorData.set(sectorX, sectorY, 'loading');
              _results1.push($(this.selector).trigger('needsector', [sectorX, sectorY]));
            } else if (this.sectorData.get(sectorX, sectorY) !== 'loading') {
              this.showSector(sectorX, sectorY);
              _results1.push(this.scrollSector(sectorX, sectorY));
            } else {
              _results1.push(void 0);
            }
          } else {
            if (this.sectorDomNodes.get(sectorX, sectorY) !== 'loading') {
              _results1.push(this.scrollSector(sectorX, sectorY));
            } else {
              _results1.push(void 0);
            }
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Board.prototype.showSector = function(sectorX, sectorY) {
    var $sectorDomNode;
    $sectorDomNode = $('<div class="sector disable-select"></div>');
    $sectorDomNode.data('x', sectorX);
    $sectorDomNode.data('y', sectorY);
    $(this.selector).append($sectorDomNode);
    return this.sectorDomNodes.set(sectorX, sectorY, $sectorDomNode);
  };

  Board.prototype.scrollSector = function(sectorX, sectorY) {
    var $domNode;
    $domNode = this.sectorDomNodes.get(sectorX, sectorY);
    $domNode.css('left', ((sectorX * this.sectorSize * this.gridSize) - this.scroll.x) + 'px');
    return $domNode.css('top', ((sectorY * this.sectorSize * this.gridSize) - this.scroll.y) + 'px');
  };

  Board.prototype.getTile24CSSOffset = function(tile) {
    return (24 * tile % 144 * -1) + 'px ' + (parseInt(24 * tile / 144) * 24 * -1) + 'px';
  };

  return Board;

})();

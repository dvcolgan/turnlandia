// Generated by CoffeeScript 1.6.3
var Square;

Square = (function() {
  function Square(json) {
    var unit, units, _i, _len, _ref;
    _.extend(this, json);
    units = [];
    _ref = this.units;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      unit = _ref[_i];
      units.push(new Unit(unit));
    }
    this.units = units;
  }

  Square.prototype.placeUnit = function(col, row, owner) {
    var square;
    square = TB.squareData.get(col, row);
    if (!square.units) {
      square.units = {};
      square.units[owner] = {
        color: 'blue',
        amount: 1
      };
    } else {
      square.units[owner].amount++;
    }
    return $(document).trigger({
      type: 'unitPlaced',
      col: col,
      row: row
    });
  };

  Square.prototype.draw = function(x, y) {
    if (this.terrainType === 'water' || this.terrainType === 'mountains' || this.terrainType === 'forest') {
      this.drawSubTile(TB.images[this.terrainType + 'Tiles'], this.northWestTile24, x, y, TB.camera.subGridSize, 0, 0);
      this.drawSubTile(TB.images[this.terrainType + 'Tiles'], this.northEastTile24, x, y, TB.camera.subGridSize, TB.camera.subGridSize, 0);
      this.drawSubTile(TB.images[this.terrainType + 'Tiles'], this.southWestTile24, x, y, TB.camera.subGridSize, 0, TB.camera.subGridSize);
      return this.drawSubTile(TB.images[this.terrainType + 'Tiles'], this.southEastTile24, x, y, TB.camera.subGridSize, TB.camera.subGridSize, TB.camera.subGridSize);
    }
  };

  Square.prototype.drawSubTile = function(image, subTile, screenX, screenY, subGridSize, subTileOffsetX, subTileOffsetY) {
    return TB.ctx.drawImage(image, this.getTile24XOffset(subTile), this.getTile24YOffset(subTile), TB.gridSize / 2, TB.gridSize / 2, screenX + subTileOffsetX, screenY + subTileOffsetY, subGridSize, subGridSize);
  };

  Square.prototype.getTile24XOffset = function(tile) {
    return 24 * tile % 144;
  };

  Square.prototype.getTile24YOffset = function(tile) {
    return parseInt(24 * tile / 144) * 24;
  };

  return Square;

})();

// Generated by CoffeeScript 1.6.3
var perlin, request, square, _;

request = require('request');

_ = require('./lib/lodash');

perlin = require('./lib/perlin');

square = {
  getTraversalCost: function(terrainType) {
    switch (terrainType) {
      case 'road':
        return 1;
      case 'plains':
        return 2;
      case 'water':
        return 0;
      case 'mountains':
        return 0;
      case 'forest':
        return 3;
      case 'city':
        return 1;
    }
  },
  getUsers: function() {
    var players;
    players = {
      1: {
        username: 'davidscolgan',
        email: 'dvcolgan@woot.egg',
        color: '#88cc88',
        leaderName: 'Larry King Live',
        peopleName: 'CNN Journalists',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      2: {
        username: 'dooskington',
        email: 'engineer@nope.egg',
        color: '#730117',
        leaderName: 'Grand Wizard Dooskington',
        peopleName: 'Programmers',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      3: {
        username: 'technocf',
        email: 'i_love@nodejs.egg',
        color: '#cccc88',
        leaderName: 'Montazuma',
        peopleName: 'TechnoChocolateLanders',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      4: {
        username: 'tinfoilboy',
        email: 'tin@foil.egg',
        color: '#133777',
        leaderName: 'TinFoilTornado',
        peopleName: 'All the peeps',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      }
    };
    return players;
  },
  getUsers: function() {
    var players;
    players = {
      1: {
        username: 'davidscolgan',
        email: 'dvcolgan@woot.egg',
        color: '#88cc88',
        leaderName: 'Larry King Live',
        peopleName: 'CNN Journalists',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      2: {
        username: 'dooskington',
        email: 'engineer@nope.egg',
        color: '#730117',
        leaderName: 'Grand Wizard Dooskington',
        peopleName: 'Programmers',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      3: {
        username: 'technocf',
        email: 'i_love@nodejs.egg',
        color: '#cccc88',
        leaderName: 'Montazuma',
        peopleName: 'TechnoChocolateLanders',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      4: {
        username: 'tinfoilboy',
        email: 'tin@foil.egg',
        color: '#133777',
        leaderName: 'TinFoilTornado',
        peopleName: 'All the peeps',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      }
    };
    return players;
  },
  getRegion: function(startCol, startRow, endCol, endRow, callback) {
    var end, start, url,
      _this = this;
    start = '[' + startCol + ',' + startRow + ']';
    end = '[' + endCol + ',' + endRow + ']';
    url = 'http://127.0.0.1:5984/turnbased_dev/_design/squares/_view/get?startkey=' + start + '&endkey=' + end;
    return request({
      url: url,
      json: true
    }, function(error, response, body) {
      var col, newSquare, newSquares, row, squares, storedSquare, _i, _j, _k, _len, _ref, _ref1;
      squares = {};
      _ref = body.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        storedSquare = _ref[_i];
        _ref1 = storedSquare.key, col = _ref1[0], row = _ref1[1];
        if (!(col in squares)) {
          squares[col] = {};
        }
        if (!(row in squares[col])) {
          squares[col][row] = {};
        }
        squares[col][row] = storedSquare.value;
      }
      if (body.rows.length !== (parseInt(endCol - startCol) + 1) * (parseInt(endRow - startRow) + 1)) {
        console.log('new squares needed: ' + body.rows.length + ' is not ' + (1 + endCol - startCol) * (1 + endRow - startRow));
        newSquares = [];
        for (col = _j = startCol; startCol <= endCol ? _j <= endCol : _j >= endCol; col = startCol <= endCol ? ++_j : --_j) {
          for (row = _k = startRow; startRow <= endRow ? _k <= endRow : _k >= endRow; row = startRow <= endRow ? ++_k : --_k) {
            if (!(col in squares) || !(row in squares[col])) {
              newSquare = _this.generateSquare(col, row);
              if (!(col in squares)) {
                squares[col] = {};
              }
              if (!(row in squares[col])) {
                squares[col][row] = {};
              }
              squares[col][row] = newSquare;
              newSquares.push(newSquare);
            }
          }
        }
        url = 'http://127.0.0.1:5984/turnbased_dev/_bulk_docs';
        return request({
          url: url,
          json: true,
          method: 'POST',
          body: {
            'docs': newSquares
          }
        }, function(error, response, body) {
          console.log('done generating squares');
          return callback(squares);
        });
      } else {
        console.log('no new squares needed');
        return callback(squares);
      }
    });
  },
  generateSquare: function(col, row) {
    var east, newSquare, north, northEast, northEastTile24, northWest, northWestTile24, south, southEast, southEastTile24, southWest, southWestTile24, thisTerrain, west;
    thisTerrain = this.terrainTypeForSquare(col, row);
    north = this.terrainTypeForSquare(col, row - 1) === thisTerrain;
    south = this.terrainTypeForSquare(col, row + 1) === thisTerrain;
    east = this.terrainTypeForSquare(col + 1, row) === thisTerrain;
    west = this.terrainTypeForSquare(col - 1, row) === thisTerrain;
    northEast = this.terrainTypeForSquare(col + 1, row - 1) === thisTerrain;
    northWest = this.terrainTypeForSquare(col - 1, row - 1) === thisTerrain;
    southEast = this.terrainTypeForSquare(col + 1, row + 1) === thisTerrain;
    southWest = this.terrainTypeForSquare(col - 1, row + 1) === thisTerrain;
    if (west && northWest && north) {
      northWestTile24 = 4;
    }
    if (west && !northWest && north) {
      northWestTile24 = 14;
    }
    if (west && northWest && !north) {
      northWestTile24 = 2;
    }
    if (west && !northWest && !north) {
      northWestTile24 = 2;
    }
    if (!west && northWest && north) {
      northWestTile24 = 12;
    }
    if (!west && !northWest && north) {
      northWestTile24 = 12;
    }
    if (!west && northWest && !north) {
      northWestTile24 = 0;
    }
    if (!west && !northWest && !north) {
      northWestTile24 = 0;
    }
    if (east && northEast && north) {
      northEastTile24 = 5;
    }
    if (east && !northEast && north) {
      northEastTile24 = 13;
    }
    if (east && northEast && !north) {
      northEastTile24 = 1;
    }
    if (east && !northEast && !north) {
      northEastTile24 = 1;
    }
    if (!east && northEast && north) {
      northEastTile24 = 15;
    }
    if (!east && !northEast && north) {
      northEastTile24 = 15;
    }
    if (!east && northEast && !north) {
      northEastTile24 = 3;
    }
    if (!east && !northEast && !north) {
      northEastTile24 = 3;
    }
    if (west && southWest && south) {
      southWestTile24 = 10;
    }
    if (west && !southWest && south) {
      southWestTile24 = 8;
    }
    if (west && southWest && !south) {
      southWestTile24 = 20;
    }
    if (west && !southWest && !south) {
      southWestTile24 = 20;
    }
    if (!west && southWest && south) {
      southWestTile24 = 6;
    }
    if (!west && !southWest && south) {
      southWestTile24 = 6;
    }
    if (!west && southWest && !south) {
      southWestTile24 = 18;
    }
    if (!west && !southWest && !south) {
      southWestTile24 = 18;
    }
    if (east && southEast && south) {
      southEastTile24 = 11;
    }
    if (east && !southEast && south) {
      southEastTile24 = 7;
    }
    if (east && southEast && !south) {
      southEastTile24 = 19;
    }
    if (east && !southEast && !south) {
      southEastTile24 = 19;
    }
    if (!east && southEast && south) {
      southEastTile24 = 9;
    }
    if (!east && !southEast && south) {
      southEastTile24 = 9;
    }
    if (!east && southEast && !south) {
      southEastTile24 = 21;
    }
    if (!east && !southEast && !south) {
      southEastTile24 = 21;
    }
    return newSquare = {
      col: col,
      row: row,
      terrainType: thisTerrain,
      northWestTile24: northWestTile24,
      northEastTile24: northEastTile24,
      southWestTile24: southWestTile24,
      southEastTile24: southEastTile24
    };
  },
  terrainTypeForSquare: function(col, row) {
    var forestValue, frequency, lakeValue, mountainValue, terrainType;
    terrainType = 'plains';
    frequency = 1.0 / 5;
    forestValue = perlin.perlin2(col * frequency, row * frequency);
    if (forestValue < 0.1) {
      terrainType = 'forest';
    }
    frequency = 1.0 / 5;
    mountainValue = perlin.perlin2(col * frequency, row * frequency);
    if (mountainValue < -0.25) {
      terrainType = 'mountains';
    }
    frequency = 1.0 / 20;
    lakeValue = perlin.perlin2(col * frequency, row * frequency);
    if (lakeValue < -0.2) {
      terrainType = 'water';
    }
    return terrainType;
  }
};

if (typeof module !== 'undefined') {
  module.exports = square;
}

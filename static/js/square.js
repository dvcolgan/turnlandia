// Generated by CoffeeScript 1.6.3
var db, perlin, request, square, util, _;

request = require('request');

_ = require('./lib/lodash');

perlin = require('./lib/perlin');

util = require('./util');

db = 'http://127.0.0.1:5984';

square = {
  getTraversalCost: function(terrainType) {
    switch (terrainType) {
      case 'road':
        return 1;
      case 'plains':
        return 2;
      case 'water':
        return 0;
      case 'mountains':
        return 0;
      case 'forest':
        return 3;
      case 'city':
        return 1;
    }
  },
  getUsers: function() {
    var players;
    players = {
      1: {
        username: 'davidscolgan',
        email: 'dvcolgan@woot.egg',
        color: '#88cc88',
        leaderName: 'Larry King Live',
        peopleName: 'CNN Journalists',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      2: {
        username: 'dooskington',
        email: 'engineer@nope.egg',
        color: '#730117',
        leaderName: 'Grand Wizard Dooskington',
        peopleName: 'Programmers',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      3: {
        username: 'technocf',
        email: 'i_love@nodejs.egg',
        color: '#cccc88',
        leaderName: 'Montazuma',
        peopleName: 'TechnoChocolateLanders',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      },
      4: {
        username: 'tinfoilboy',
        email: 'tin@foil.egg',
        color: '#133777',
        leaderName: 'TinFoilTornado',
        peopleName: 'All the peeps',
        wood: 10,
        food: 10,
        ore: 10,
        money: 10
      }
    };
    return players;
  },
  getActions: function(userID, callback) {
    var url,
      _this = this;
    url = 'http://127.0.0.1:5984/turnbased_dev_actions/_design/actions/_view/get?key=' + userID;
    return request({
      url: url,
      json: true
    }, function(error, response, body) {
      if (body.error) {
        return callback([]);
      } else {
        return callback(body);
      }
    });
  },
  saveAction: function(userID, action, callback) {
    return request({
      url: db + '/turnbased_dev_actions/_design/actions',
      method: 'PUT',
      json: true,
      body: action
    }, function() {
      return callback();
    });
  },
  getRegion: function(startCol, startRow, width, height, callback) {
    var col, end, keysToGet, row, start, url, _i, _j, _ref, _ref1,
      _this = this;
    start = '[' + startCol + ',' + startRow + ']';
    end = '[' + (startCol + width - 1) + ',' + (startRow + height - 1) + ']';
    keysToGet = [];
    for (col = _i = startCol, _ref = startCol + width; startCol <= _ref ? _i < _ref : _i > _ref; col = startCol <= _ref ? ++_i : --_i) {
      for (row = _j = startRow, _ref1 = startRow + height; startRow <= _ref1 ? _j < _ref1 : _j > _ref1; row = startRow <= _ref1 ? ++_j : --_j) {
        keysToGet.push([col, row]);
      }
    }
    url = 'http://127.0.0.1:5984/turnbased_dev_squares/_design/squares/_view/get?keys=' + JSON.stringify(keysToGet);
    return request({
      url: url,
      json: true
    }, function(error, response, body) {
      var newSquare, newSquares, squares, storedSquare, _k, _l, _len, _m, _ref2, _ref3, _ref4, _ref5;
      squares = new util.Hash2D();
      if (body.rows) {
        _ref2 = body.rows;
        for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
          storedSquare = _ref2[_k];
          _ref3 = storedSquare.key, col = _ref3[0], row = _ref3[1];
          squares.set(col, row, storedSquare.value);
        }
      } else {
        body.rows = [];
      }
      if (body.rows.length !== width * height) {
        console.log('new squares needed: ' + body.rows.length + ' is not ' + width * height);
        newSquares = [];
        for (col = _l = startCol, _ref4 = startCol + width; startCol <= _ref4 ? _l < _ref4 : _l > _ref4; col = startCol <= _ref4 ? ++_l : --_l) {
          for (row = _m = startRow, _ref5 = startRow + height; startRow <= _ref5 ? _m < _ref5 : _m > _ref5; row = startRow <= _ref5 ? ++_m : --_m) {
            if (!squares.get(col, row)) {
              newSquare = _this.generateSquare(col, row);
              squares.set(col, row, newSquare);
              newSquares.push(newSquare);
            }
          }
        }
        url = 'http://127.0.0.1:5984/turnbased_dev_squares/_bulk_docs';
        return request({
          url: url,
          json: true,
          method: 'POST',
          body: {
            'docs': newSquares
          }
        }, function(error, response, body) {
          console.log('done generating squares');
          return callback(squares);
        });
      } else {
        console.log('no new squares needed');
        return callback(squares);
      }
    });
  },
  generateSquare: function(col, row) {
    var east, newSquare, north, northEast, northEastTile24, northWest, northWestTile24, south, southEast, southEastTile24, southWest, southWestTile24, thisTerrain, west;
    thisTerrain = this.terrainTypeForSquare(col, row);
    north = this.terrainTypeForSquare(col, row - 1) === thisTerrain;
    south = this.terrainTypeForSquare(col, row + 1) === thisTerrain;
    east = this.terrainTypeForSquare(col + 1, row) === thisTerrain;
    west = this.terrainTypeForSquare(col - 1, row) === thisTerrain;
    northEast = this.terrainTypeForSquare(col + 1, row - 1) === thisTerrain;
    northWest = this.terrainTypeForSquare(col - 1, row - 1) === thisTerrain;
    southEast = this.terrainTypeForSquare(col + 1, row + 1) === thisTerrain;
    southWest = this.terrainTypeForSquare(col - 1, row + 1) === thisTerrain;
    if (west && northWest && north) {
      northWestTile24 = 4;
    }
    if (west && !northWest && north) {
      northWestTile24 = 14;
    }
    if (west && northWest && !north) {
      northWestTile24 = 2;
    }
    if (west && !northWest && !north) {
      northWestTile24 = 2;
    }
    if (!west && northWest && north) {
      northWestTile24 = 12;
    }
    if (!west && !northWest && north) {
      northWestTile24 = 12;
    }
    if (!west && northWest && !north) {
      northWestTile24 = 0;
    }
    if (!west && !northWest && !north) {
      northWestTile24 = 0;
    }
    if (east && northEast && north) {
      northEastTile24 = 5;
    }
    if (east && !northEast && north) {
      northEastTile24 = 13;
    }
    if (east && northEast && !north) {
      northEastTile24 = 1;
    }
    if (east && !northEast && !north) {
      northEastTile24 = 1;
    }
    if (!east && northEast && north) {
      northEastTile24 = 15;
    }
    if (!east && !northEast && north) {
      northEastTile24 = 15;
    }
    if (!east && northEast && !north) {
      northEastTile24 = 3;
    }
    if (!east && !northEast && !north) {
      northEastTile24 = 3;
    }
    if (west && southWest && south) {
      southWestTile24 = 10;
    }
    if (west && !southWest && south) {
      southWestTile24 = 8;
    }
    if (west && southWest && !south) {
      southWestTile24 = 20;
    }
    if (west && !southWest && !south) {
      southWestTile24 = 20;
    }
    if (!west && southWest && south) {
      southWestTile24 = 6;
    }
    if (!west && !southWest && south) {
      southWestTile24 = 6;
    }
    if (!west && southWest && !south) {
      southWestTile24 = 18;
    }
    if (!west && !southWest && !south) {
      southWestTile24 = 18;
    }
    if (east && southEast && south) {
      southEastTile24 = 11;
    }
    if (east && !southEast && south) {
      southEastTile24 = 7;
    }
    if (east && southEast && !south) {
      southEastTile24 = 19;
    }
    if (east && !southEast && !south) {
      southEastTile24 = 19;
    }
    if (!east && southEast && south) {
      southEastTile24 = 9;
    }
    if (!east && !southEast && south) {
      southEastTile24 = 9;
    }
    if (!east && southEast && !south) {
      southEastTile24 = 21;
    }
    if (!east && !southEast && !south) {
      southEastTile24 = 21;
    }
    return newSquare = {
      col: col,
      row: row,
      terrainType: thisTerrain,
      northWestTile24: northWestTile24,
      northEastTile24: northEastTile24,
      southWestTile24: southWestTile24,
      southEastTile24: southEastTile24
    };
  },
  terrainTypeForSquare: function(col, row) {
    var forestValue, frequency, lakeValue, mountainValue, terrainType;
    terrainType = 'plains';
    frequency = 1.0 / 5;
    forestValue = perlin.perlin2(col * frequency, row * frequency);
    if (forestValue < 0.1) {
      terrainType = 'forest';
    }
    frequency = 1.0 / 5;
    mountainValue = perlin.perlin2(col * frequency, row * frequency);
    if (mountainValue < -0.25) {
      terrainType = 'mountains';
    }
    frequency = 1.0 / 20;
    lakeValue = perlin.perlin2(col * frequency, row * frequency);
    if (lakeValue < -0.2) {
      terrainType = 'water';
    }
    return terrainType;
  }
};

if (typeof module !== 'undefined') {
  module.exports = square;
}

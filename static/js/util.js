// Generated by CoffeeScript 1.6.3
var Hash2D, util;

util = {
  calculate_distance: function(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  },
  random_choice: function(collection) {
    return collection[Math.floor(Math.random() * collection.length)];
  },
  Hash2D: Hash2D = (function() {
    function Hash2D() {
      this.hash = {};
    }

    Hash2D.prototype.get = function(x, y) {
      if (x in this.hash && y in this.hash[x]) {
        return this.hash[x][y];
      } else {
        return null;
      }
    };

    Hash2D.prototype.increment = function(x, y) {
      if (!(x in this.hash)) {
        this.hash[x] = {};
      }
      if (typeof this.hash[x][y] === 'number') {
        return this.hash[x][y]++;
      } else {
        return this.hash[x][y] = 1;
      }
    };

    Hash2D.prototype.set = function(x, y, val) {
      if (!(x in this.hash)) {
        this.hash[x] = {};
      }
      return this.hash[x][y] = val;
    };

    Hash2D.prototype["delete"] = function(x, y) {
      var val;
      val = this.get(x, y);
      this.set(x, y, null);
      return val;
    };

    Hash2D.prototype.values = function() {
      var result, val, x, y, yData, _ref;
      result = [];
      _ref = this.hash;
      for (x in _ref) {
        yData = _ref[x];
        for (y in yData) {
          val = yData[y];
          result.push(val);
        }
      }
      return result;
    };

    Hash2D.prototype.concat = function(other) {
      return this.concatRaw(other.hash);
    };

    Hash2D.prototype.concatRaw = function(hash) {
      var val, x, y, yData, _results;
      _results = [];
      for (x in hash) {
        yData = hash[x];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (y in yData) {
            val = yData[y];
            _results1.push(this.set(x, y, val));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Hash2D.prototype.size = function() {
      return this.values().length;
    };

    Hash2D.prototype.getRaw = function() {
      return this.hash;
    };

    return Hash2D;

  })()
};

if (typeof module !== 'undefined') {
  module.exports = util;
}

// Generated by CoffeeScript 1.6.3
var Hash2D, util;

util = {
  calculateDistance: function(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  },
  randomChoice: function(collection) {
    return collection[Math.floor(Math.random() * collection.length)];
  },
  sum: function(arr) {
    return _.reduce(arr, function(sum, num) {
      return sum + num;
    });
  },
  getMouseOffset: function(e) {
    var borderLeftWidth, borderTopWidth, offsetX, offsetY, rect, style, target;
    target = e.target || e.srcElement;
    style = target.currentStyle || window.getComputedStyle(target, null);
    borderLeftWidth = parseInt(style['borderLeftWidth'], 10);
    borderTopWidth = parseInt(style['borderTopWidth'], 10);
    rect = target.getBoundingClientRect();
    offsetX = e.clientX - borderLeftWidth - rect.left;
    offsetY = e.clientY - borderTopWidth - rect.top;
    return [offsetX, offsetY];
  },
  hexToRGB: function(hex) {
    var result, shorthandRegex;
    shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function(m, r, g, b) {
      return r + r + g + g + b + b;
    });
    result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
      return {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      };
    } else {
      return null;
    }
  },
  makeFPSCounter: function(numSamples) {
    var fpsSamples, timestamps;
    timestamps = [+new Date()];
    fpsSamples = [];
    return function(timestamp) {
      var deltas, fps, fpsSum, i, _i, _ref;
      timestamps.push(timestamp);
      if (timestamps.length > numSamples) {
        timestamps.shift();
      }
      deltas = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = numSamples - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(timestamps[i + 1] - timestamps[i]);
        }
        return _results;
      })();
      fps = util.sum(deltas) / numSamples;
      fpsSamples.push(parseInt(1000 / fps));
      if (fpsSamples.length > numSamples) {
        fpsSamples.shift();
      }
      fpsSum = 0;
      for (i = _i = 0, _ref = numSamples - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        fpsSum = fpsSamples;
      }
      return parseInt(util.sum(fpsSamples) / numSamples);
    };
  },
  Hash2D: Hash2D = (function() {
    function Hash2D() {
      this.hash = {};
    }

    Hash2D.prototype.get = function(x, y) {
      if (x in this.hash && y in this.hash[x]) {
        return this.hash[x][y];
      } else {
        return null;
      }
    };

    Hash2D.prototype.increment = function(x, y) {
      if (!(x in this.hash)) {
        this.hash[x] = {};
      }
      if (typeof this.hash[x][y] === 'number') {
        return this.hash[x][y]++;
      } else {
        return this.hash[x][y] = 1;
      }
    };

    Hash2D.prototype.set = function(x, y, val) {
      if (!(x in this.hash)) {
        this.hash[x] = {};
      }
      return this.hash[x][y] = val;
    };

    Hash2D.prototype["delete"] = function(x, y) {
      var val;
      val = this.get(x, y);
      this.set(x, y, null);
      delete this.hash[x][y];
      return val;
    };

    Hash2D.prototype.iterate = function(callback) {
      var val, x, y, yData, _ref, _results;
      _ref = this.hash;
      _results = [];
      for (x in _ref) {
        yData = _ref[x];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (y in yData) {
            val = yData[y];
            _results1.push(callback(x, y, val));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Hash2D.prototype.iterateIntKeys = function(callback) {
      var val, x, y, yData, _ref, _results;
      _ref = this.hash;
      _results = [];
      for (x in _ref) {
        yData = _ref[x];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (y in yData) {
            val = yData[y];
            _results1.push(callback(parseInt(x), parseInt(y), val));
          }
          return _results1;
        })());
      }
      return _results;
    };

    Hash2D.prototype.priorityPopAllIntKeys = function(callback) {
      var i, smallest, val, x, y, yData, _i, _ref, _ref1, _results;
      _results = [];
      for (i = _i = 0, _ref = this.size(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        smallest = {
          x: null,
          y: null,
          val: null
        };
        _ref1 = this.hash;
        for (x in _ref1) {
          yData = _ref1[x];
          for (y in yData) {
            val = yData[y];
            if (smallest.val === null || val < smallest.val) {
              smallest.x = x;
              smallest.y = y;
              smallest.val = val;
            }
          }
        }
        this["delete"](smallest.x, smallest.y);
        _results.push(callback(parseInt(smallest.x), parseInt(smallest.y), smallest.val));
      }
      return _results;
    };

    Hash2D.prototype.push = function(x, y, val) {
      var cur;
      cur = this.get(x, y);
      if ($.isArray(cur)) {
        return cur.push(val);
      } else {
        return this.set(x, y, [val]);
      }
    };

    Hash2D.prototype.values = function() {
      var result, val, x, y, yData, _ref;
      result = [];
      _ref = this.hash;
      for (x in _ref) {
        yData = _ref[x];
        for (y in yData) {
          val = yData[y];
          result.push(val);
        }
      }
      return result;
    };

    Hash2D.prototype.values2D = function() {
      var result, val, x, y, yData, ys, _ref;
      result = [];
      _ref = this.hash;
      for (x in _ref) {
        yData = _ref[x];
        ys = [];
        for (y in yData) {
          val = yData[y];
          ys.push(val);
        }
        result.push(ys);
      }
      return result;
    };

    Hash2D.prototype.concat = function(other) {
      return this.concatRaw(other.hash);
    };

    Hash2D.prototype.concatRaw = function(hash) {
      var val, x, y, yData, _results;
      _results = [];
      for (x in hash) {
        yData = hash[x];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (y in yData) {
            val = yData[y];
            _results1.push(this.set(x, y, val));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Hash2D.prototype.size = function() {
      return this.values().length;
    };

    Hash2D.prototype.getRaw = function() {
      return this.hash;
    };

    Hash2D.prototype.clear = function() {
      return this.hash = {};
    };

    Hash2D.prototype.clone = function() {
      var clone;
      clone = new util.Hash2D();
      clone.hash = this.hash;
    };

    return Hash2D;

  })()
};

if (typeof module !== 'undefined') {
  module.exports = util;
}

// Generated by CoffeeScript 1.6.3
var _this = this;

ig.module('game.main').requires('impact.entity', 'impact.game', 'impact.font', 'game.board-square', 'game.unit').defines(function() {
  _this.TurnBased = ig.Game.extend({
    TILE_SIZE: 42,
    font: new ig.Font('images/04b03.font-large.png'),
    gridImage: new ig.Image('images/grid-small.png'),
    gravity: 0,
    clearColor: 'white',
    init: function() {
      ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
      ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
      ig.input.bind(ig.KEY.UP_ARROW, 'up');
      ig.input.bind(ig.KEY.DOWN_ARROW, 'down');
      ig.input.bind(ig.KEY.MOUSE1, 'mouseleft');
      ig.input.initMouse();
      this.lastMouse = {
        x: 0,
        y: 0
      };
      return $.getJSON('/api/sector/20/10/40/20/', function(data, status) {
        var i, square, _i, _len, _ref, _results;
        if (status === 'success') {
          this.data = data;
          _ref = data.squares;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            square = _ref[i];
            console.log('created square' + i);
            console.log(square.x + ' ' + square.y);
            _results.push(ig.game.spawnEntity(BoardSquare, ig.game.TILE_SIZE * square.x, ig.game.TILE_SIZE * square.y, {
              color: square.owner_color,
              resourceAmount: square.resource_amount,
              wallHealth: square.wall_health
            }));
          }
          return _results;
        }
      });
    },
    update: function() {
      if (ig.input.state('left')) {
        this.screen.x -= 4;
      }
      if (ig.input.state('right')) {
        this.screen.x += 4;
      }
      if (ig.input.state('up')) {
        this.screen.y -= 4;
      }
      if (ig.input.state('down')) {
        this.screen.y += 4;
      }
      if (ig.input.state('mouseleft')) {
        this.screen.x += this.lastMouse.x - ig.input.mouse.x;
        this.screen.y += this.lastMouse.y - ig.input.mouse.y;
      }
      this.lastMouse.x = ig.input.mouse.x;
      this.lastMouse.y = ig.input.mouse.y;
      return this.parent();
    },
    draw: function() {
      return this.parent();
    }
  });
  $.ajaxSetup({
    crossDomain: false,
    beforeSend: function(xhr, settings) {
      if (!/^(GET|HEAD|OPTIONS|TRACE)$/.test(settings.type)) {
        return xhr.setRequestHeader("X-CSRFToken", $.cookie('csrftoken'));
      }
    }
  });
  ig.main('#canvas', TurnBased, 12, $(window).width(), $(window).height() - 21, 1);
  ig.system.resize($(window).width(), $(window).height() - 21);
  return $(window).resize(function() {
    return ig.system.resize($(window).width(), $(window).height() - 21);
  });
});

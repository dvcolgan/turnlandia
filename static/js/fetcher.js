// Generated by CoffeeScript 1.6.3
var DataFetcher;

DataFetcher = (function() {
  function DataFetcher() {
    this.loadingStates = new util.Hash2D();
  }

  DataFetcher.prototype.loadInitialData = function(callback) {
    var _this = this;
    return $.ajax({
      url: '/api/initial-load/',
      method: 'GET',
      dataType: 'json',
      success: function(data) {
        var prevTurn;
        if ('turn' in localStorage) {
          prevTurn = localStorage.get('turn');
          if (prevTurn !== data.currentTurn) {
            localStorage.setItem('turn', data.currentTurn);
            localStorage.clear();
          }
        }
        return callback(data);
      }
    });
  };

  DataFetcher.prototype.loadSectors = function(startSectorX, startSectorY, endSectorX, endSectorY, callback) {
    var sectorX, sectorY, _i, _results;
    _results = [];
    for (sectorX = _i = startSectorX; startSectorX <= endSectorX ? _i <= endSectorX : _i >= endSectorX; sectorX = startSectorX <= endSectorX ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (sectorY = _j = startSectorY; startSectorY <= endSectorY ? _j <= endSectorY : _j >= endSectorY; sectorY = startSectorY <= endSectorY ? ++_j : --_j) {
          if (this.loadingStates.get(sectorX, sectorY) === null) {
            this.loadingStates.set(sectorX, sectorY, false);
            _results1.push(this.loadSector(sectorX, sectorY, callback));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DataFetcher.prototype.loadSector = function(sectorX, sectorY, callback) {
    var key, squareData,
      _this = this;
    key = sectorX + '|' + sectorY;
    if (key in localStorage) {
      squareData = JSON.parse(localStorage.getItem(key));
      if (squareData[0].turn === 1) {
        console.log('cache hit at ' + key);
        $(window).trigger({
          type: 'sectorLoaded',
          squareData: squareData
        });
        return;
      }
    }
    return $.ajax({
      url: '/api/squares/' + (sectorX * TB.sectorSize) + '/' + (sectorY * TB.sectorSize) + '/' + TB.sectorSize + '/' + TB.sectorSize + '/',
      method: 'GET',
      dataType: 'json',
      success: function(squareData) {
        _this.loadingStates.set(sectorX, sectorY, true);
        return $(window).trigger({
          type: 'sectorLoaded',
          squareData: squareData
        });
      }
    });
  };

  DataFetcher.prototype.loadSectorsOnScreen = function() {
    var endSectorX, endSectorY, sectorPixelSize, sectorSectorX, sectorSectorY, sectorsHigh, sectorsWide, startSectorX, startSectorY, x, y, _i, _j;
    sectorPixelSize = TB.sectorSize * TB.camera.zoomedGridSize;
    sectorsWide = Math.ceil(TB.camera.width / TB.sectorSize / TB.camera.zoomedGridSize);
    sectorsHigh = Math.ceil(TB.camera.height / TB.sectorSize / TB.camera.zoomedGridSize);
    startSectorX = null;
    startSectorY = null;
    endSectorX = null;
    endSectorY = null;
    for (sectorSectorX = _i = 0; 0 <= sectorsWide ? _i <= sectorsWide : _i >= sectorsWide; sectorSectorX = 0 <= sectorsWide ? ++_i : --_i) {
      for (sectorSectorY = _j = 0; 0 <= sectorsHigh ? _j <= sectorsHigh : _j >= sectorsHigh; sectorSectorY = 0 <= sectorsHigh ? ++_j : --_j) {
        x = (Math.floor(TB.camera.x / sectorPixelSize)) + sectorSectorX;
        y = (Math.floor(TB.camera.y / sectorPixelSize)) + sectorSectorY;
        if (startSectorX === null || x < startSectorX) {
          startSectorX = x;
        }
        if (startSectorY === null || y < startSectorY) {
          startSectorY = y;
        }
        if (endSectorX === null || x > endSectorX) {
          endSectorX = x;
        }
        if (endSectorY === null || y > endSectorY) {
          endSectorY = x;
        }
      }
    }
    return this.loadSectors(startSectorX, startSectorY, endSectorX, endSectorY);
  };

  return DataFetcher;

})();

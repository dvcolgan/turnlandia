// Generated by CoffeeScript 1.6.3
var BoardLoader;

BoardLoader = (function() {
  function BoardLoader() {}

  BoardLoader.prototype.load_sector = function(sector_x, sector_y) {
    var $sector_dom_node;
    if (sector_x > this.max_sector_x || sector_x < this.min_sector_x || sector_y > this.max_sector_y || sector_y < this.min_sector_y) {
      return;
    }
    if (!(sector_x in this.sectors)) {
      this.sectors[sector_x] = {};
    }
    if (!(sector_y in this.sectors[sector_x])) {
      $sector_dom_node = $('<div class="sector disable-select"></div>');
      this.$dom_node.append($sector_dom_node);
      return this.sectors[sector_x][sector_y] = new Sector(this, $sector_dom_node, sector_x, sector_y, TB.sector_size);
    } else {
      return this.sectors[sector_x][sector_y].show();
    }
  };

  BoardLoader.prototype.load_sector_of_point = function(col, row) {
    var sector_x, sector_y;
    sector_x = Math.floor(col / TB.sector_size) * TB.sector_size;
    sector_y = Math.floor(row / TB.sector_size) * TB.sector_size;
    return this.load_sector(sector_x, sector_y);
  };

  BoardLoader.prototype.load_sectors_on_screen = function() {
    var sector_col, sector_pixel_size, sector_row, sectors_high, sectors_wide, x, y, _i, _results;
    sector_pixel_size = TB.sector_size * TB.grid_size;
    sectors_wide = Math.ceil(this.get_view_width() / TB.sector_size / TB.grid_size);
    sectors_high = Math.ceil(this.get_view_height() / TB.sector_size / TB.grid_size);
    _results = [];
    for (sector_col = _i = 0; 0 <= sectors_wide ? _i <= sectors_wide : _i >= sectors_wide; sector_col = 0 <= sectors_wide ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (sector_row = _j = 0; 0 <= sectors_high ? _j <= sectors_high : _j >= sectors_high; sector_row = 0 <= sectors_high ? ++_j : --_j) {
          x = (Math.floor(this.scroll.x / sector_pixel_size)) + sector_col;
          y = (Math.floor(this.scroll.y / sector_pixel_size)) + sector_row;
          _results1.push(this.load_sector(x, y));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  BoardLoader.prototype.containing_sector_loaded = function(col, row) {
    var sector_x, sector_y;
    sector_x = Math.floor(col / TB.sector_size) * TB.sector_size;
    sector_y = Math.floor(row / TB.sector_size) * TB.sector_size;
    return sector_x in this.sectors && sector_y in this.sectors[sector_x];
  };

  return BoardLoader;

})();
